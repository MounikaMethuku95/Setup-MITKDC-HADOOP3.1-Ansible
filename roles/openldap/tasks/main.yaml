# Install OpenLDAP server and client
- name: Install OpenLDAP
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - openldap-servers
    - openldap-clients

# Enable and start slapd service
- name: Start and enable slapd
  ansible.builtin.service:
    name: slapd
    state: started
    enabled: yes

# Generate hashed LDAP root password
- name: Generate hashed LDAP root password
  ansible.builtin.command: slappasswd -s {{ ldap_rootpw }}
  register: rootpw_hash
  changed_when: false

# Render LDIF for suffix and rootDN
- name: Render LDIF for suffix and rootDN
  ansible.builtin.template:
    src: configure-rootdn.ldif.j2
    dest: /tmp/configure-rootdn.ldif
    owner: root
    group: root
    mode: '0600'

# Apply LDAP rootDN and suffix config
- name: Apply LDAP rootDN and suffix config
  ansible.builtin.command: ldapmodify -Y EXTERNAL -H ldapi:/// -f /tmp/configure-rootdn.ldif
  args:
    creates: /etc/openldap/slapd.d/olcRootPW.set

# Create marker file to avoid reapplying rootDN config
- name: Create marker file to avoid reapplying rootDN config
  ansible.builtin.file:
    path: /etc/openldap/slapd.d/olcRootPW.set
    state: touch

# Render LDIF for baseDN
- name: Render baseDN LDIF
  ansible.builtin.template:
    src: basedn.ldif.j2
    dest: /tmp/basedn.ldif
    owner: root
    group: root
    mode: '0600'

# Ensure baseDN entry exists in LDAP
- name: Ensure baseDN entry exists in LDAP
  community.general.ldap_entry:
    dn: "{{ basedn }}"
    objectClass:
      - top
      - dcObject
      - organization
    attributes:
      o: Hadoop Test Cluster
      dc: "{{ basedn.split(',')[0].split('=')[1] }}"
    server_uri: ldapi:///
    bind_dn: "{{ ldap_rootdn }}"
    bind_pw: "{{ ldap_rootpw }}"

# Check if Kerberos schema exists on the system
- name: Check if Kerberos schema exists
  ansible.builtin.stat:
    path: /etc/openldap/schema/kerberos.schema
  register: kerberos_schema_file

# If schema is not found, copy our bundled version
- name: Copy bundled Kerberos schema file if not present
  ansible.builtin.copy:
    src: kerberos.schema
    dest: /etc/openldap/schema/kerberos.schema
    owner: root
    group: root
    mode: '0644'
  when: not kerberos_schema_file.stat.exists

# Convert Kerberos schema to LDIF
- name: Convert Kerberos schema to LDIF
  ansible.builtin.command:
    cmd: slaptest -f /etc/openldap/schema/kerberos.schema -F /tmp/kerberos_schema
  args:
    creates: /tmp/kerberos_schema/cn=config/cn=schema/cn={0}kerberos.ldif

# Add Kerberos schema to LDAP config (idempotent)
- name: Add Kerberos schema to LDAP config
  ansible.builtin.command:
    cmd: ldapadd -Y EXTERNAL -H ldapi:/// -f /tmp/kerberos_schema/cn=config/cn=schema/cn={0}kerberos.ldif
  args:
    creates: /etc/openldap/slapd.d/cn=config/cn=schema/cn={0}kerberos.ldif

# Cleanup temporary schema directory
- name: Remove temporary Kerberos schema directory
  ansible.builtin.file:
    path: /tmp/kerberos_schema
    state: absent
