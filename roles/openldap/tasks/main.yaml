# ========= Install OpenLDAP =========
- name: Install OpenLDAP
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - openldap-servers
    - openldap-clients

- name: Start and enable slapd
  ansible.builtin.service:
    name: slapd
    state: started
    enabled: yes

# ========= Generate hashed LDAP root password =========
- name: Generate hashed LDAP root password
  ansible.builtin.command: >
    slappasswd -s {{ ldap_rootpw }}
  register: hashed_pw
  changed_when: false

- name: Set fact for ldap_hashed_pw
  ansible.builtin.set_fact:
    ldap_hashed_pw: "{{ hashed_pw.stdout }}"

# ========= Configure rootDN and suffix =========
- name: Render LDIF for suffix and rootDN
  ansible.builtin.template:
    src: configure-rootdn.ldif.j2
    dest: /tmp/configure-rootdn.ldif

- name: Apply LDAP rootDN and suffix config
  ansible.builtin.command: >
    ldapmodify -Y EXTERNAL -H ldapi:/// -f /tmp/configure-rootdn.ldif
  args:
    creates: "{{ rootdn_marker }}"

- name: Create marker file to avoid reapplying rootDN config
  ansible.builtin.file:
    path: "{{ rootdn_marker }}"
    state: touch

# ========= Configure baseDN =========
- name: Render LDIF for baseDN entry
  ansible.builtin.template:
    src: basedn.ldif.j2
    dest: /tmp/basedn.ldif

- name: Check if baseDN already exists
  ansible.builtin.command: >
    ldapsearch -LLL -x -D "{{ ldap_rootdn }}" -w "{{ ldap_rootpw }}"
    -b "{{ basedn }}" dn
  register: basedn_check
  failed_when: false
  changed_when: false

- name: Add baseDN entry to LDAP
  ansible.builtin.command: >
    ldapadd -Y EXTERNAL -H ldapi:/// -f /tmp/basedn.ldif
  when: basedn_check.rc != 0
  args:
    creates: "{{ basedn_marker }}"

- name: Create marker file for baseDN
  ansible.builtin.file:
    path: "{{ basedn_marker }}"
    state: touch
  when: basedn_check.rc != 0

# ========= Kerberos Schema =========
- name: Check if kerberos schema already added
  ansible.builtin.command: >
    ldapsearch -LLL -Y EXTERNAL -H ldapi:/// -b "cn=schema,cn=config" cn=kerberos
  register: kerberos_schema_check
  failed_when: false
  changed_when: false

- name: Ensure temporary kerberos schema directory is clean
  ansible.builtin.file:
    path: "{{ kerberos_schema_tmpdir }}"
    state: absent

- name: Create temporary kerberos schema directory
  ansible.builtin.file:
    path: "{{ kerberos_schema_tmpdir }}"
    state: directory

- name: Create minimal slapd.conf for kerberos schema
  ansible.builtin.copy:
    dest: "{{ kerberos_convert_conf }}"
    content: |
      include {{ kerberos_schema_file }}
      pidfile /tmp/slapd.pid
      argsfile /tmp/slapd.args
      database config
      rootdn "cn=admin,cn=config"

- name: Convert kerberos.schema to LDIF
  ansible.builtin.command: >
    slaptest -f {{ kerberos_convert_conf }} -F {{ kerberos_schema_tmpdir }}
  when: kerberos_schema_check.rc != 0

- name: Add Kerberos schema to slapd
  ansible.builtin.command: >
    ldapadd -Y EXTERNAL -H ldapi:/// -f {{ kerberos_schema_tmpdir }}/cn=config/cn=schema/cn={0}kerberos.ldif
  when: kerberos_schema_check.rc != 0

- name: Cleanup temporary kerberos schema files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ kerberos_convert_conf }}"
    - "{{ kerberos_schema_tmpdir }}"
