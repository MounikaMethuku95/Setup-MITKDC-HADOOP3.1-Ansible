# ========= OpenLDAP Role Tasks =========

- name: Install OpenLDAP
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - openldap-servers
    - openldap-clients

- name: Start and enable slapd
  ansible.builtin.service:
    name: slapd
    state: started
    enabled: yes

# ========= RootDN setup =========
# ========= Generate hashed LDAP root password =========
- name: Generate hashed LDAP root password
  ansible.builtin.command: 
    cmd: "slappasswd -s {{ ldap_rootpw }}"
  register: ldap_rootpw_pw
  changed_when: false

- name: Set fact for ldap_hashed_pw
  ansible.builtin.set_fact:
    ldap_hashed_pw: "{{ ldap_rootpw_hash.stdout }}"


- name: Render LDIF for suffix and rootDN
  ansible.builtin.template:
    src: configure-rootdn.ldif.j2
    dest: /tmp/configure-rootdn.ldif

- name: Apply LDAP rootDN and suffix config
  ansible.builtin.command:
    cmd: "ldapmodify -Y EXTERNAL -H ldapi:/// -f /tmp/configure-rootdn.ldif"
  args:
    creates: "{{ rootdn_marker }}"

- name: Create marker file to avoid reapplying rootDN config
  ansible.builtin.file:
    path: "{{ rootdn_marker }}"
    state: touch

# ========= BaseDN entry =========
- name: Render LDIF for baseDN entry
  ansible.builtin.template:
    src: basedn.ldif.j2
    dest: /tmp/basedn.ldif

- name: Check if baseDN already exists
  ansible.builtin.command:
    cmd: "ldapsearch -x -D '{{ ldap_rootdn }}' -w '{{ ldap_rootpw }}' -b '{{ basedn }}'"
  register: basedn_check
  changed_when: false
  failed_when: false

- name: Add baseDN entry to LDAP
  ansible.builtin.command:
    cmd: "ldapadd -x -D '{{ ldap_rootdn }}' -w '{{ ldap_rootpw }}' -f /tmp/basedn.ldif"
  when: basedn_check.rc != 0

- name: Create marker file for baseDN
  ansible.builtin.file:
    path: "{{ basedn_marker }}"
    state: touch

# ========= Kerberos schema =========
- name: Check if kerberos schema already added
  ansible.builtin.command:
    cmd: "ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=schema,cn=config cn=kerberos"
  register: kerberos_schema_check
  failed_when: false
  changed_when: false

- name: Ensure temporary kerberos schema directory is clean
  ansible.builtin.file:
    path: "{{ kerberos_schema_tmpdir }}"
    state: absent

- name: Create temporary kerberos schema directory
  ansible.builtin.file:
    path: "{{ kerberos_schema_tmpdir }}"
    state: directory

- name: Create minimal slapd.conf for kerberos schema
  ansible.builtin.template:
    src: kerberos_convert.conf.j2
    dest: "{{ kerberos_convert_conf }}"

- name: Convert kerberos.schema to LDIF
  ansible.builtin.command: >
    slaptest -f {{ kerberos_convert_conf }} -F {{ kerberos_schema_tmpdir }}
  when: kerberos_schema_check.rc != 0

- name: Add Kerberos schema to slapd
  ansible.builtin.command: >
    ldapadd -Y EXTERNAL -H ldapi:/// -f {{ kerberos_schema_tmpdir }}/cn=config/cn=schema/cn={0}kerberos.ldif
  when: kerberos_schema_check.rc != 0

- name: Cleanup temporary kerberos schema files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ kerberos_convert_conf }}"
    - "{{ kerberos_schema_tmpdir }}"
