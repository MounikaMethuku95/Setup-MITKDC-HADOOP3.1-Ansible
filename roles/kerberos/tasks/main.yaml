# ========= Install Kerberos packages =========
- name: Install Kerberos packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - krb5-server
    - krb5-server-ldap
    - krb5-libs
    - krb5-workstation
    - openldap-clients
    - python-ldap

- name: Ensure kerberos templates directory exists (tmp)
  ansible.builtin.file:
    path: /tmp/ansible-kerberos
    state: directory
    mode: '0755'

# ------------------------------
# Ensure Kerberos container (ou=Kerberos,dc=...) exists
# ------------------------------
- name: Render kerberos container LDIF (for debugging / backup)
  ansible.builtin.template:
    src: kerberos-container.ldif.j2
    dest: /tmp/ansible-kerberos/kerberos-container.ldif
    owner: root
    group: root
    mode: '0600'

- name: Ensure Kerberos container exists (bind with Manager DN)
  community.general.ldap_entry:
    dn: "{{ kerberos_container_dn }}"
    objectClass:
      - top
      - organizationalUnit
    attributes:
      ou: Kerberos
    bind_dn: "{{ ldap_rootdn }}"
    bind_pw: "{{ ldap_rootpw }}"
    server_uri: "ldap://localhost"
    validate_cert: no
  register: kerberos_container
  failed_when: kerberos_container is failed

# ------------------------------
# Ensure Kerberos service account exists (kdc LDAP bind account)
# ------------------------------
- name: Render kerberos service account LDIF (for debugging / backup)
  ansible.builtin.template:
    src: kerberos-service.ldif.j2
    dest: /tmp/ansible-kerberos/kerberos-service.ldif
    owner: root
    group: root
    mode: '0600'

- name: Ensure Kerberos service account exists (bind with Manager DN)
  community.general.ldap_entry:
    dn: "{{ kdc_ldap_dn }}"
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      cn: "{{ kdc_ldap_dn.split(',')[0].split('=')[1] | default('krb-svc') }}"
      userPassword: "{{ kdc_ldap_pw }}"
      description: "Kerberos LDAP Bind Account"
    bind_dn: "{{ ldap_rootdn }}"
    bind_pw: "{{ ldap_rootpw }}"
    server_uri: "ldap://localhost"
    validate_cert: no
  register: kerberos_service_account
  failed_when: kerberos_service_account is failed

# ------------------------------
# Create Kerberos DB (kdb5_ldap_util)
# - Ensure container exists first (we did above)
# - Use creates: marker to keep idempotency
# ------------------------------
- name: Check for Kerberos DB marker file
  ansible.builtin.stat:
    path: "{{ kerberos_db_marker | default('/etc/krb5kdc/kerberos_db_created') }}"
  register: kerberos_db_marker_stat

- name: Create Kerberos database with LDAP backend
  ansible.builtin.command:
    cmd: >
      kdb5_ldap_util -D "{{ ldap_rootdn }}" -w "{{ ldap_rootpw }}"
      create -subtrees "{{ kerberos_container_dn }}"
      -r "{{ realm }}" -s -H ldap://localhost -P "{{ kdc_master_pw }}"
  register: kdb_create
  changed_when: kdb_create.rc == 0
  failed_when: kdb_create.rc not in [0,1]  # some versions return 1 with warnings; adjust if needed
  when: not kerberos_db_marker_stat.stat.exists

- name: Create marker for Kerberos DB
  ansible.builtin.file:
    path: "{{ kerberos_db_marker | default('/etc/krb5kdc/kerberos_db_created') }}"
    state: touch
  when: kdb_create is defined and kdb_create.rc == 0

# ------------------------------
# Ensure Kerberos services running
# ------------------------------
- name: Ensure KDC and admin services are enabled and running
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - krb5kdc
    - kadmin
