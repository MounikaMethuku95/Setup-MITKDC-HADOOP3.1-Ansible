# roles/kerberos/tasks/main.yaml

# ========= Install Kerberos packages =========
- name: Install Kerberos packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - krb5-server
    - krb5-server-ldap
    - krb5-libs
    - krb5-workstation
    - openldap-clients
    - python-ldap
    - python3-pexpect

# ========= Ensure kerberos templates directory exists (tmp) =========
- name: Ensure kerberos templates directory exists (tmp)
  ansible.builtin.file:
    path: /tmp/kerberos
    state: directory
    mode: '0755'

# ========= Render kerberos container LDIF =========
- name: Render kerberos container LDIF (for debugging / backup)
  ansible.builtin.template:
    src: kerberos_container.ldif.j2
    dest: /tmp/kerberos/kerberos_container.ldif

# ========= Ensure Kerberos container exists =========
- name: Ensure Kerberos container exists (bind with Manager DN)
  community.general.ldap_entry:
    dn: "{{ kerberos_container_dn }}"
    objectClass:
      - top
      - organizationalUnit
    attributes:
      ou: Kerberos
    bind_dn: "{{ ldap_rootdn }}"
    bind_pw: "{{ ldap_rootpw }}"
    server_uri: "ldap://localhost"
  register: kerberos_container
  failed_when: kerberos_container is failed

# ========= Render kerberos service account LDIF =========
- name: Render kerberos service account LDIF (for debugging / backup)
  ansible.builtin.template:
    src: kerberos_service.ldif.j2
    dest: /tmp/kerberos/kerberos_service.ldif

# ========= Ensure Kerberos service account exists =========
- name: Ensure Kerberos service account exists (bind with Manager DN)
  community.general.ldap_entry:
    dn: "{{ kdc_ldap_dn }}"
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      cn: krb-svc
      userPassword: "{{ kdc_ldap_pw }}"
    bind_dn: "{{ ldap_rootdn }}"
    bind_pw: "{{ ldap_rootpw }}"
    server_uri: "ldap://localhost"

# ========= Ensure Kerberos keyfile directory exists =========
- name: Ensure Kerberos keyfile directory exists
  ansible.builtin.file:
    path: /var/kerberos/krb5kdc
    state: directory
    owner: root
    group: root
    mode: '0700'

# ========= Create ldap-service.keyfile for KDC/LDAP binding =========
- name: Create ldap-service.keyfile
  ansible.builtin.copy:
    dest: "{{ kerberos_service_keyfile }}"
    content: |
      {{ kerberos_service_dn }}
      {{ kerberos_service_pw }}
    owner: root
    group: root
    mode: '0600'


- name: Verify ldap service keyfile exists
  ansible.builtin.stat:
    path: "{{ kerberos_service_keyfile }}"
  register: ldap_keyfile_check
  failed_when: not ldap_keyfile_check.stat.exists


# ========= Create Kerberos database with LDAP backend =========
# ========= Check for Kerberos DB marker =========
- name: Check for Kerberos DB marker file
  ansible.builtin.stat:
    path: "{{ kerberos_db_marker }}"
  register: kerberos_db_marker_check

# ========= Create Kerberos database with LDAP backend =========
- name: Create Kerberos database with LDAP backend
  ansible.builtin.expect:
    command: "kdb5_util create -r {{ realm }} -s"
    responses:
      "Enter KDC database master key:": "{{ kdc_master_pw }}"
      "Re-enter KDC database master key to verify:": "{{ kdc_master_pw }}"
  when: not kerberos_db_marker_check.stat.exists

# ========= Create marker after DB creation =========
- name: Create Kerberos DB marker
  ansible.builtin.file:
    path: "{{ kerberos_db_marker }}"
    state: touch
  when: not kerberos_db_marker_check.stat.exists

# ========= Ensure KDC and admin services are enabled and running =========
- name: Deploy kdc.conf
  ansible.builtin.template:
    src: kdc.conf.j2
    dest: /var/kerberos/krb5kdc/kdc.conf
    owner: root
    group: root
    mode: '0644'
  notify:
    - Restart krb5kdc
    - Restart kadmin

